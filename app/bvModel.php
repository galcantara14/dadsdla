<?php

namespace App;

use Illuminate\Database\Eloquent\Model;
use App\sql;


class bvModel extends Model{
    
    // == This function get all clients relationated with the AgencyGroup selected by user in the filter == //
    public function getSalesRepByAgencyGroup(String $agencyGroupId, string $salesRep, int $year, Object $con, Object $sql){
        $queryCmaps = "SELECT distinct sr.id as srID, sr.name as srName, a.id as agency, a.name as agencyName, c.id as client, c.name as clientName from cmaps cm 
                   left join agency a on a.ID = cm.agency_id 
                   left join client c on c.ID = cm.client_id 
                   left join sales_rep sr on sr.ID = cm.sales_rep_id  
                   left join agency_group ag on ag.ID = a.agency_group_id 
                   where ag.ID = $agencyGroupId
                   and sr.id = $salesRep
                   and cm.`year` in ($year)
                   order by 1 asc";

        $resultCmaps = $con->query($queryCmaps);
        $from = array('srID' , 'srName','agency', 'agencyName', 'client', 'clientName');
        $valueCmaps = $sql->fetch($resultCmaps, $from, $from);


        // == This part make the integration with WarnerMedia ALEPH base == //
        $queryAleph = "SELECT distinct sr.id as srID, sr.name as srName, a.id as agency, a.name as agencyName, c.id as client, c.name as clientName from aleph al 
                   left join agency a on a.ID = al.agency_id 
                   left join client c on c.ID = al.client_id 
                   left join sales_rep sr on sr.ID = al.current_sales_rep_id  
                   left join agency_group ag on ag.ID = a.agency_group_id 
                   where ag.ID = $agencyGroupId
                   and sr.id = $salesRep
                   and al.`year` in ($year)
                   order by 1 asc";

        $resultAleph = $con->query($queryAleph);
        $from = array('srID' , 'srName','agency', 'agencyName', 'client', 'clientName');
        $valueAleph = $sql->fetch($resultAleph, $from, $from);
    
        
        // == This variable return a matrix with Sales Rep Name and ID, Agency Name and ID and Client name and ID == //
        if ($valueAleph == "") {
            $value = $valueCmaps;
        }elseif ($valueCmaps == "") {
            $value = $valueAleph;
        }else{
            $value = array_merge($valueCmaps,$valueAleph);
        } 

        $value = array_values($this->unique_multidim_array($value, 'client'));
        return $value;
    }


    function unique_multidim_array($array, $key) {
        $temp_array = array();
        $i = 0;
        $key_array = array();
       
        foreach($array as $val) {
            if (!in_array($val[$key], $key_array)) {
                $key_array[$i] = $val[$key];
                $temp_array[$i] = $val;
            }
            $i++;
        }
        return $temp_array;
    }


    // == This function get values for every client in the matrix generated by getSalesRepByAgencyGroup function == // 
    public function getValueForBvByYear(String $salesRep, String $agency, String $client, int $year, String $valueType, Object $con, Object $sql, float $pRate, float $pRateWM){
        $queryCMAPS = "SELECT SUM($valueType) from cmaps
                 WHERE sales_rep_id = $salesRep
                 AND agency_id = $agency
                 AND client_id = $client
                 AND year = $year";
 
         $resultCMAPS = $con->query($queryCMAPS);
         $from = "SUM($valueType)";
         $valuePivot = $sql->fetchSUM($resultCMAPS, $from);
         $valueCMAPS = $valuePivot[$from] / $pRate;
 
         // == ALEPH integration == //
         $queryALEPH = "SELECT SUM(gross_revenue) from aleph
                 WHERE current_sales_rep_id = $salesRep
                 AND agency_id = $agency
                 AND client_id = $client
                 AND year = $year";
 
         $resultALEPH = $con->query($queryALEPH);
         $from = "SUM(gross_revenue)";
         $valuePivot = $sql->fetchSUM($resultALEPH, $from);
         $valueALEPH = $valuePivot[$from] / $pRateWM;
         
         if ($valueType == 'net'){
            $valueALEPH = $valueALEPH * 0.8;
         }
         
         $value = $valueCMAPS + $valueALEPH;
         return $value;
     }

     public function getPrevision($salesRep, $clientID, $agencyID, $currency, $previsionType, $con, $sql, $pRateWM){
        switch ($previsionType){
            case 'wbd':
                $previsionQuery = "SELECT forecast_revenue AS forecast, currency_id AS currency from bv_forecast
                                   WHERE sales_rep_id = $salesRep
                                   AND client_id = $clientID
                                   AND agency_id = $agencyID";
                $from = array('forecast', 'currency');
                break;
            case 'spt':
                $previsionQuery = "SELECT forecast_spt_revenue AS forecast, currency_id AS currency, value from bv_forecast
                                   WHERE sales_rep_id = $salesRep
                                   AND client_id = $clientID
                                   AND agency_id = $agencyID";
                $from = array('forecast', 'currency');
                break;
            case 'status':
                $previsionQuery = "SELECT status from bv_forecast
                                   WHERE sales_rep_id = $salesRep
                                   AND client_id = $clientID
                                   AND agency_id = $agencyID";
                $from = array('status');
                break;
        }

        $previsionResult = $con->query($previsionQuery);
        $previsionValue = $sql->fetch($previsionResult, $from, $from);

        if ($previsionType == 'wbd' || $previsionType == 'spt'){
            if ($currency != $previsionValue[0]['currency']){
                $return =  $previsionValue[0]['forecast'] / $pRateWM;
            } else {
                $return =  $previsionValue[0]['forecast'];
            }
        }else{
            $return = $previsionValue[0]['status'];
        }

        //var_dump($return);
        return $return;
     }
 
    // == This function generate the matrix used in front-end == //
    public function tableBV(String $agencyGroupId, int $year, Object $con, String $valueType, String $salesRep, String $currency){
        $sql = new sql();
        $pRate = new pRate();
        $year = (int)date("Y");
        $pYear = $year-1;
        $ppYear = $year-2;
        $bvTable = array();
        $result = $this->getSalesRepByAgencyGroup($agencyGroupId, $salesRep, $year, $con, $sql);

        if($currency == '1'){
            $pRateWM = 1; // Temporary value for WM pRate, will need change after 2023
            $pRateValue = 1;
        } else {
            $pRateWM = 4.99; // Temporary value for WM pRate, will need change after 2023
            $pRateValue = $pRate->getPRateByRegionAndYear($con, array('1'), array($year));
        }

        //var_dump($pRateValue);

        /* == Generate arrays for fill the matrix, 
        the matrix structure is:
        [Sales Rep Name, Agency Name, Client Name, Antepenultimate Year Value, Penultimate Year Value, Actual Year Value, Actual Year Prevision, (Actual Year Value + Actual Year Prevision) and Variation] == */
        for ($i = 0; $i < sizeof($result); $i++){
            $pPreviousValue = $this->getValueForBvByYear($result[$i]['srID'], $result[$i]['agency'], $result[$i]['client'], $ppYear, $valueType, $con, $sql, $pRateValue, $pRateWM);
            $previousValue = $this->getValueForBvByYear($result[$i]['srID'], $result[$i]['agency'], $result[$i]['client'], $pYear, $valueType, $con, $sql, $pRateValue, $pRateWM);
            $actualValue = $this->getValueForBvByYear($result[$i]['srID'], $result[$i]['agency'], $result[$i]['client'], $year, $valueType, $con, $sql, $pRateValue, $pRateWM);
            $prevValue = $this->getPrevision($result[$i]['srID'], $result[$i]['client'], $result[$i]['agency'], $valueType, 'wbd', $con, $sql, $pRateWM);
            $sptPrev = $this->getPrevision($result[$i]['srID'], $result[$i]['client'], $result[$i]['agency'], $valueType, 'spt', $con, $sql, $pRateWM);
            $statusString = $this->getPrevision($result[$i]['srID'], $result[$i]['client'], $result[$i]['agency'], $valueType, 'status', $con, $sql, $pRateWM);

            // == Percentage and division by 0 check, if values are big than 0 == //
            if ($actualValue > 0 && $previousValue > 0){
                $variation = number_format((($actualValue + $prevValue) / $previousValue) * 100);
            } else {
                $variation = 0;
            }

            // == Pivot Array used for fullfill the matrix, using the structure above == //
            $pivotArray = array('client' => $result[$i]['clientName'], $ppYear => $pPreviousValue, $pYear => $previousValue, $year => $actualValue, "prev" => $prevValue, "prevActualSum" => $actualValue + $prevValue, "sptPrev" => $sptPrev, "variation" => $variation, "status" => $statusString, "clientId" => $result[$i]['client'], "agencyId" => $result[$i]['agency']);
            array_push($bvTable, $pivotArray);

        };
        //var_dump($bvTable);
        return $bvTable;
    }

    // == Generate total value based on result of tableBV function == //
    public function getBVTotal(array $bvTable, int $year){
        $ppYear = (String) $year - 2;
        $pYear = (String) $year - 1 ;

        $totalPpYear = 0;
        $totalPYear = 0;
        $totalCYear = 0;
        $totalPrev = 0;
        $totalSPTPrev = 0;

        for ($i = 0; $i < sizeof($bvTable); $i++){
            $totalPpYear += $bvTable[$i][$ppYear];
            $totalPYear += $bvTable[$i][$pYear];
            $totalCYear += $bvTable[$i][$year];
            $totalPrev += $bvTable[$i]['prev'];
            $totalSPTPrev += $bvTable[$i]['sptPrev'];
        }

        if ($totalCYear > 0 && $totalPYear > 0){
            $totalVariation = number_format((($totalCYear + $totalPrev) / $totalPYear) * 100);
        } else {
            $totalVariation = 0;
        }

        $totalPrevActualSum = $totalCYear + $totalPrev;

        $pivotArray = array($ppYear => $totalPpYear, $pYear => $totalPYear, $year => $totalCYear, "prev" => $totalPrev, "prevActualSum" => $totalPrevActualSum, "sptPrev" => $totalSPTPrev, "variation" => $totalVariation);

        return $pivotArray;
    }

    // == This function are called by Save button in front-end and verify if the registers are already created in database, if already exist it will make a update, if not, will create a new registry == //
    public function verifyUpdateAndSaveBV(int $salesRep, int $clientID, int $agencyID, int $currency, String $value, $forecast, $forecastSPT, $status, Object $con, Object $sql){
        $updateTime = date("Y-m-d");

        $selectQuery = "SELECT agency_id AS agency, client_id AS client
                        FROM bv_forecast
                        WHERE sales_rep_id = $salesRep
                        AND client_id = $clientID
                        AND agency_id = $agencyID
                        AND currency_id = $currency
                        AND value = '$value'";
        $from = array('agency', 'client');
        $selectResultQuery = $con->query($selectQuery);
        $resultSelect = $sql->fetch($selectResultQuery, $from, $from);
        
        if ($resultSelect != false){
            $updateQuery = "UPDATE bv_forecast 
                        SET forecast_revenue = $forecast,
                        forecast_spt_revenue = $forecastSPT,
                        updated_date = '$updateTime',
                        status = '$status'
                        WHERE sales_rep_id = $salesRep
                        AND client_id = $clientID
                        AND agency_id = $agencyID
                        AND currency_id = $currency
                        AND value = '$value'";

            $resultQuery = $con->query($updateQuery);
        }else{
            $insertQuery = "INSERT INTO  bv_forecast
                        SET updated_date = '$updateTime',
                        sales_rep_id = $salesRep,
                        client_id = $clientID,
                        agency_id = $agencyID,
                        currency_id = $currency,
                        value = '$value',
                        forecast_revenue = $forecast,
                        forecast_spt_revenue = $forecastSPT,
                        status = '$status'";
            $resultInsertQuery = $con->query($insertQuery);

        }
    }
}
