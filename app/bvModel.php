<?php

namespace App;

use Illuminate\Database\Eloquent\Model;
use App\sql;
use App\base;
use App\brand;


class bvModel extends Model{
    
    // == This function get all clients relationated with the AgencyGroup selected by user in the filter == //
    public function getSalesRepByAgencyGroup(String $agencyGroupId, string $salesRep, int $year, Object $con, Object $sql){
        $base = new base();   
        $year = (int)date("Y");
        $pYear = $year-1;
        $ppYear = $year-2;

        // == This part make the integration with WarnerMedia ALEPH base == //
        $queryAleph = "SELECT distinct sr.id as srID, sr.name as srName, a.id as agency, a.name as agencyName, c.id as client, c.name as clientName from wbd al 
                   left join agency a on a.ID = al.agency_id 
                   left join client c on c.ID = al.client_id 
                   left join sales_rep sr on sr.ID = al.current_sales_rep_id  
                   left join agency_group ag on ag.ID = a.agency_group_id 
                   where ag.ID = $agencyGroupId
                   and (sr.id in ($salesRep))
                   and al.`year` in ($year,$pYear,$ppYear)
                   order by 1 asc";
        //echo"<pre>$queryAleph</pre>";
        $resultAleph = $con->query($queryAleph);
        $from = array('srID' , 'srName','agency', 'agencyName', 'client', 'clientName');
        $valueAleph = $sql->fetch($resultAleph, $from, $from);
    
        
        // == This variable return a matrix with Sales Rep Name and ID, Agency Name and ID and Client name and ID == //
        $value = $valueAleph;

        return $value;
    }


    public function unique_multidim_array($array, $key) {
        $temp_array = array();
        $i = 0;
        $key_array = array();
       
        foreach($array as $val) {
            if (!in_array($val[$key], $key_array)) {
                $key_array[$i] = $val[$key];
                $temp_array[$i] = $val;
            }
            $i++;
        }
        return $temp_array;
    }


    // == This function get values for every client in the matrix generated by getSalesRepByAgencyGroup function == // 
    public function getValueForBvByYear(String $salesRep, String $agency, String $client, int $year, String $valueType, Object $con, Object $sql, String $currency){
         // == ALEPH integration == //
        $pRate = new pRate();

        if($currency == '1'){
            $pRateWM = 1; // Temporary value for WM pRate, will need change after 2023
        }else {
            if ($year <= 2022 ) {
                $pRateWM = 4.99;
            }else{
                $pRateWM = $pRate->getPRateByRegionAndYear($con, array('1'), array($year));
            }
        }

        $valueWbd = $valueType."_value";
        $queryALEPH = "SELECT SUM($valueWbd) from wbd
                 where agency_id = $agency
                 AND client_id = $client
                 AND year = $year";
        //var_dump($queryALEPH);
        $resultALEPH = $con->query($queryALEPH);
        $from = "SUM($valueWbd)";
        $valuePivot = $sql->fetchSUM($resultALEPH, $from);
        $valueALEPH = $valuePivot[$from] / $pRateWM;

         $value = $valueALEPH;
         return $value;
     }

     public function getPrevision(String $salesRep, String $clientID, String $agencyID, String $currency,String $previsionType,Object $con, Object $sql, int $year){
       $pRate = new pRate();
        if($currency == '1'){
            $pRateWM = 1; // Temporary value for WM pRate, will need change after 2023
        }else {
            if ($year <= 2022 ) {
                $pRateWM = 4.99;
            }else{
                $pRateWM = $pRate->getPRateByRegionAndYear($con, array('1'), array($year));
            }
        }

        switch ($previsionType){
            case 'wbd':
                $previsionQuery = "SELECT forecast_revenue AS forecast, currency_id AS currency from bv_forecast
                                   WHERE (sales_rep_id IN ($salesRep))
                                   AND client_id = $clientID
                                   AND agency_id = $agencyID";
                $from = array('forecast', 'currency');
                break;
            case 'spt':
                $previsionQuery = "SELECT forecast_spt_revenue AS forecast, currency_id AS currency, value from bv_forecast
                                   WHERE (sales_rep_id IN ($salesRep))
                                   AND client_id = $clientID
                                   AND agency_id = $agencyID";
                $from = array('forecast', 'currency');
                break;
            case 'status':
                $previsionQuery = "SELECT status from bv_forecast
                                   WHERE (sales_rep_id IN ($salesRep))
                                   AND client_id = $clientID
                                   AND agency_id = $agencyID";
                $from = array('status');
                break;
        }

        $previsionResult = $con->query($previsionQuery);
        $previsionValue = $sql->fetch($previsionResult, $from, $from);

        if ($previsionType == 'wbd' || $previsionType == 'spt'){
            if ($currency != $previsionValue[0]['currency']){
                $return =  $previsionValue[0]['forecast'] / $pRateWM;
            } else {
                $return =  $previsionValue[0]['forecast'];
            }
        }else{
            $return = $previsionValue[0]['status'];
        }

        //var_dump($return);
        return $return;
     }
 
    // == This function generate the matrix used in front-end == //
    public function tableBV(String $agencyGroupId, int $year, Object $con, String $valueType, String $salesRep, String $currency){
        $sql = new sql();
        $pRate = new pRate();
        $year = (int)date("Y");
        $pYear = $year-1;
        $ppYear = $year-2;

        $bvTable = array();
        $includeClient = $this->getSalesRepByClient($agencyGroupId, $salesRep,$con, $sql);
        $repInfo = $this->getSalesRepByAgencyGroup($agencyGroupId, $salesRep, $year, $con, $sql);
        
        if ($includeClient != null) {
            $result = array_merge($repInfo,$includeClient);
            $result = array_values($result);
        }else{
            $result = $repInfo;
        }
        /* == Generate arrays for fill the matrix, 
        the matrix structure is:
        [Sales Rep Name, Agency Name, Client Name, Antepenultimate Year Value, Penultimate Year Value, Actual Year Value, Actual Year Prevision, (Actual Year Value + Actual Year Prevision) and Variation] == */
        for ($i = 0; $i < sizeof($result); $i++){
            $pPreviousValue = $this->getValueForBvByYear($result[$i]['srID'], $result[$i]['agency'], $result[$i]['client'], $ppYear, $valueType, $con, $sql,$currency);
            $previousValue = $this->getValueForBvByYear($result[$i]['srID'], $result[$i]['agency'], $result[$i]['client'], $pYear, $valueType, $con, $sql,$currency);
            $actualValue = $this->getValueForBvByYear($result[$i]['srID'], $result[$i]['agency'], $result[$i]['client'], $year, $valueType, $con, $sql,$currency);
            $prevValue = $this->getPrevision($salesRep, $result[$i]['client'], $result[$i]['agency'], $currency, 'wbd', $con, $sql,$year);
            $sptPrev = $this->getPrevision($salesRep, $result[$i]['client'], $result[$i]['agency'],$currency, 'spt', $con, $sql,$year);
            $statusString = $this->getPrevision($salesRep, $result[$i]['client'], $result[$i]['agency'],$currency, 'status', $con, $sql,$year);

            // == Percentage and division by 0 check, if values are big than 0 == //
            if ($actualValue > 0 && $previousValue > 0){
                $variation = number_format((($actualValue + $prevValue) / $previousValue) * 100);
            } else {
                $variation = 0;
            }

            // == Pivot Array used for fullfill the matrix, using the structure above == //
            $pivotArray = array('client' => $result[$i]['clientName'],'agency' => $result[$i]['agencyName'], $ppYear => $pPreviousValue, $pYear => $previousValue, $year => $actualValue, "prev" => $prevValue, "prevActualSum" => $actualValue + $prevValue, "sptPrev" => $sptPrev, "variation" => $variation, "status" => $statusString, "clientId" => $result[$i]['client'], "agencyId" => $result[$i]['agency']);
            
            //var_dump($pivotArray);
            array_push($bvTable, $pivotArray);

        };    
       
        
        //var_dump($bvTable);
        return $bvTable;
    }

    // == Generate total value based on result of tableBV function == //
    public function getBVTotal(array $bvTable, int $year){
        $ppYear = (String) $year - 2;
        $pYear = (String) $year - 1 ;

        $totalPpYear = 0;
        $totalPYear = 0;
        $totalCYear = 0;
        $totalPrev = 0;
        $totalSPTPrev = 0;

        for ($i = 0; $i < sizeof($bvTable); $i++){
            $totalPpYear += $bvTable[$i][$ppYear];
            $totalPYear += $bvTable[$i][$pYear];
            $totalCYear += $bvTable[$i][$year];
            $totalPrev += $bvTable[$i]['prev'];
            $totalSPTPrev += $bvTable[$i]['sptPrev'];
        }

        if ($totalCYear > 0  && $totalPYear > 0 ){
            $totalVariation = number_format((($totalCYear + $totalPrev) / $totalPYear) * 100);
        } else {
            $totalVariation = 0;
        }

        $totalPrevActualSum = $totalCYear + $totalPrev;

        $pivotArray = array($ppYear => $totalPpYear, $pYear => $totalPYear, $year => $totalCYear, "prev" => $totalPrev, "prevActualSum" => $totalPrevActualSum, "sptPrev" => $totalSPTPrev, "variation" => $totalVariation);

        return $pivotArray;
    }

    // == This function are called by Save button in front-end and verify if the registers are already created in database, if already exist it will make a update, if not, will create a new registry == //
    public function verifyUpdateAndSaveBV(int $salesRep, int $clientID, int $agencyID, int $agencyGroupId, int $currency, String $value, $forecast, $forecastSPT, $status, Object $con, Object $sql){
        $updateTime = date("Y-m-d");

        $selectQuery = "SELECT agency_id AS agency, client_id AS client
                        FROM bv_forecast
                        WHERE sales_rep_id = $salesRep
                        AND client_id = $clientID
                        AND agency_id = $agencyID
                        AND agency_group_id = $agencyGroupId
                        AND currency_id = $currency
                        AND value = '$value'";
        $from = array('agency', 'client');
        $selectResultQuery = $con->query($selectQuery);
        $resultSelect = $sql->fetch($selectResultQuery, $from, $from);

        if ($resultSelect != false){
            $updateQuery = "UPDATE bv_forecast 
                        SET forecast_revenue = $forecast,
                        forecast_spt_revenue = $forecastSPT,
                        updated_date = '$updateTime',
                        status = '$status'
                        WHERE sales_rep_id = $salesRep
                        AND client_id = $clientID
                        AND agency_id = $agencyID
                        AND agency_group_id = $agencyGroupId
                        AND currency_id = $currency
                        AND value = '$value'";

            $resultQuery = $con->query($updateQuery);
        }else{
            $insertQuery = "INSERT INTO  bv_forecast
                        SET updated_date = '$updateTime',
                        sales_rep_id = $salesRep,
                        client_id = $clientID,
                        agency_id = $agencyID,
                        agency_group_id = $agencyGroupId,
                        currency_id = $currency,
                        value = '$value',
                        forecast_revenue = $forecast,
                        forecast_spt_revenue = $forecastSPT,
                        status = '$status'";
            $resultInsertQuery = $con->query($insertQuery);
            //var_dump($insertQuery);
        }

    }

    public function getRepAndDateOfPrev(String $salesRep, int $agencyGroupId, Object $con){
        $sql = new sql();
        
        $select = "SELECT distinct sales_rep.name as salesRep, updated_date as updateDate
                    FROM bv_forecast
                    LEFT JOIN sales_rep ON bv_forecast.sales_rep_id = sales_rep.ID
                    WHERE (sales_rep_id IN ($salesRep))
                    AND agency_group_id = $agencyGroupId
                ";
        
        $from = array('salesRep', 'updateDate'); 
        $selectQuery = $con->query($select);
        $resultSelect = $sql->fetch($selectQuery, $from, $from);

        if ($resultSelect != false) {
           $updateDate = $resultSelect;
        }else{
            $updateDate[0] = array('salesRep' => '-', 'updateDate' => '-');
        }

        return $updateDate;
    }

    public function listOFClients(Object $con, int $year){
        $sql = new sql();

        $select = "SELECT DISTINCT c.ID AS id ,c.name as client
                    FROM wbd w
                    left join client c on c.ID = w.client_id
                    WHERE c.client_group_id = 1 ";

        $from = array('id','client');
        $selectQuery = $con->query($select);
        $client = $sql->fetch($selectQuery, $from, $from);

        return $client;
    }

    public function newClientInclusion(Object $con, String $agencyGroup, String $salesRep, String $client){
        $updateTime = date("Y-m-d");

        $insertQuery = "INSERT INTO  bv_new_clients
                        SET created_date = '$updateTime',
                        sales_rep_id = $salesRep,
                        client_id = $client,
                        agency_group_id = $agencyGroup
                        ";
        //var_dump($insertQuery);
        $resultInsertQuery = $con->query($insertQuery);
    }

    public function getSalesRepByClient(String $agencyGroupId, string $salesRep, Object $con, Object $sql){
        
        $year = (int)date("Y");
        $pYear = $year-1;
        $ppYear = $year-2;

         $selectClient = "SELECT distinct  c.id as id     
                            from bv_new_clients b
                            left join sales_rep sr on sr.ID = b.sales_rep_id 
                            left join client c on c.ID = b.client_id 
                            left join agency_group ag on ag.ID = b.agency_group_id 
                            where ag.ID = $agencyGroupId
                            and (sr.ID IN ($salesRep))";

            $resultClient = $con->query($selectClient);
            $from = array('id');
            $client = $sql->fetch($resultClient, $from, $from);
            //var_dump($selectClient);

            if ($client != null) {
                for ($c=0; $c < sizeof($client); $c++) {
                    $tmp1[] = $client[$c]['id'];                      
                    
                    $queryClient[$c] = "SELECT distinct sr.id as srID, sr.name as srName, a.id as agency, a.name as agencyName, c.id as client, c.name as clientName from  wbd cm 
                           left join agency a on a.ID = cm.agency_id 
                           left join client c on c.ID = cm.client_id 
                           left join sales_rep sr on sr.ID = cm.current_sales_rep_id  
                           left join agency_group ag on ag.ID = a.agency_group_id 
                           where c.id in ($tmp1[$c])
                           and cm.`year` in ($year,$pYear,$ppYear)
                           order by 1 asc";
                
                    $result[$c] = $con->query($queryClient[$c]);
                    $from = array('srID' , 'srName','agency', 'agencyName', 'client', 'clientName');
                    $tmp[] = $sql->fetch($result[$c], $from, $from);
                }

                for ($x=0; $x <sizeof($tmp) ; $x++) { 
                   if ($tmp != false) {
                        $valueClient[] = $tmp[$x][0];
                    }else{
                        $valueClient = "";
                    }
                } 
                
                return $valueClient;
            }else{
                $valueClient = "";

                return $valueClient;
            }
    }

    public function getClientByAgencyGroup(String $agencyGroupId, string $salesRep, Object $con, Object $sql){
        $base = new base();   
        $year = (int)date("Y");
        $pYear = $year-1;
        $ppYear = $year-2;
        $pppYear = $year-3;

        // == This part make the integration with WarnerMedia ALEPH base == //
        $queryAleph = "SELECT distinct a.id as agency, a.name as agencyName, c.id as client, c.name as clientName from wbd w 
                   left join agency a on a.ID = w.agency_id 
                   left join client c on c.ID = w.client_id 
                   left join brand b on b.ID = w.brand_id  
                   left join agency_group ag on ag.ID = a.agency_group_id 
                   where ag.ID = $agencyGroupId
                   and w.`year` in ($pYear,$ppYear,$pppYear)
                   order by 1 asc";
        //var_dump($queryAleph);
        $resultAleph = $con->query($queryAleph);
        $from = array('agency', 'agencyName', 'client', 'clientName');
        $valueAleph = $sql->fetch($resultAleph, $from, $from);
    
        
        // == This variable return a matrix with Sales Rep Name and ID, Agency Name and ID and Client name and ID == //
        $value = $valueAleph;

        return $value;
    }


    public function getBrandByClient(Object $sql, Object $con, $agencyGroupId, $brand, int $year,$client){
       
        //var_dump($client);
        $queryALEPH = "SELECT SUM(net_value) from wbd
                left join agency a on a.ID = wbd.agency_id 
                left join agency_group ag on ag.ID = a.agency_group_id 
                left join client c on c.ID = wbd.client_id
              WHERE (brand_id = $brand)
              AND ag.ID = $agencyGroupId
              and c.ID = $client
              AND year = $year
         ";
       
 
        $resultALEPH = $con->query($queryALEPH);
        $from = "SUM(net_value)";
        $valuePivot = $sql->fetchSUM($resultALEPH, $from);

        /*for ($b=0; $b < sizeof($brand); $b++) { 
            $tmp = $brand[$b]['id'];

            $selectQuery = "SELECT distinct b.id as brandId, b.name as brand, c.id as cId, c.name as clientName
                        from wbd w
                        left join client c on c.ID = w.client_id
                        left join brand b on b.ID = w.brand_id
                        left join agency a on a.ID = w.agency_id 
                        left join agency_group ag on ag.ID = a.agency_group_id 
                        where ag.ID = $agencyGroupId
                        and (b.id in ($tmp))
                        and (w.year in ($year))
                        ";
        }
                

        $result = $con->query($selectQuery);
        $from = array('brandId', 'brand','cId','clientName');
        $resultBrand = $sql->fetch($result,$from,$from);*/

       //var_dump($valuePivot);

        return $valuePivot;
        
    }

    public function getLiquidValues(string $brand, int $year, String $agencyGroupId, Object $con, Object $sql, String $salesRep){

        $queryALEPH = "SELECT SUM(net_value) from wbd w
                    LEFT JOIN agency a on a.ID = w.agency_id 
                    LEFT JOIN sales_rep sr on sr.ID = w.current_sales_rep_id
                    WHERE w.brand_id = $brand
                    AND (sr.id in ($salesRep))
                    AND a.agency_group_id = $agencyGroupId
                    AND w.year = $year
             ";
        //var_dump($queryALEPH);
        $resultALEPH = $con->query($queryALEPH);
        $from = "SUM(net_value)";
        $valuePivot = $sql->fetchSUM($resultALEPH, $from);
        $value = $valuePivot[$from];

        return $value;
    }

    // == This function generate the matrix used in front-end == //
    public function liquidTable(String $agencyGroupId, int $year, Object $con, String $valueType, String $salesRep, String $currency, array $brand){
        $sql = new sql();
        $pRate = new pRate();
        $year = (int)date("Y");
        $pYear = $year-1;
        $ppYear = $year-2;
        $pppYear = $year-3;
        $table = array();
        $b = new brand();
        $matrix = array();

        $result = $this->getClientByAgencyGroup($agencyGroupId, $salesRep, $con, $sql);
        /* == Generate arrays for fill the matrix, 
        the matrix structure is:
        [Sales Rep Name, Agency Name, Client Name, Antepenultimate Year Value, Penultimate Year Value, Actual Year Value, Actual Year Prevision, (Actual Year Value + Actual Year Prevision) and Variation] == */
        for ($b=0; $b <sizeof($brand) ; $b++) { 

            $liquidValuePyear = $this->getLiquidValues($brand[$b]['id'],$pYear,$agencyGroupId,$con,$sql,$salesRep);
            $liquidValuePpyear = $this->getLiquidValues($brand[$b]['id'],$ppYear,$agencyGroupId,$con,$sql,$salesRep);
            $liquidValuePppyear = $this->getLiquidValues($brand[$b]['id'],$pppYear,$agencyGroupId,$con,$sql,$salesRep);

            $pivotArray = array('brand' => $brand[$b]['name'],'liquidPyear' => $liquidValuePyear, 'liquidPpyear' => $liquidValuePpyear, 'liquidPppyear' => $liquidValuePppyear);
        
            //var_dump($pivotArray);
            array_push($matrix, $pivotArray);
            //var_dump($matrix);

        }

        
        //var_dump($matrix);
        
        return $matrix;
    }

    public function totalperBrandInvest(array $table){

        for ($i = 0; $i < sizeof($table); $i++){
            $total[] = ($table[$i]['liquidPpyear'] + $table[$i]['liquidPppyear'] + $table[$i]['liquidPyear']);

        }

        return $total;
    }

     public function totalInvestYear(array $table, array $totalChannels){

        $totalPYear = 0;
        $totalPpYear = 0;
        $totalPppYear = 0;
        $allYears = 0;

        for ($i = 0; $i < sizeof($table); $i++){
            $totalPYear += $table[$i]['liquidPyear'];
            $totalPpYear += $table[$i]['liquidPpyear'];
            $totalPppYear += $table[$i]['liquidPppyear'];
            $allYears += $totalChannels[$i];

            $total = array('totalPYear' => $totalPYear, 'totalPpYear' => $totalPpYear, 'totalPppYear' => $totalPppYear, 'all' => $allYears);

        }

        return $total;
    }

    public function totalperBrand($table){

        
    }

}
