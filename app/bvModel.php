<?php

namespace App;

use Illuminate\Database\Eloquent\Model;
use App\sql;
use App\base;
use App\brand;


class bvModel extends Model{
    
    // == This function get all clients relationated with the AgencyGroup selected by user in the filter == //
    public function getSalesRepByAgencyGroup(String $agencyGroupId, string $salesRep, int $year, Object $con, Object $sql){
        $base = new base();   
        $year = (int)date("Y");
        $pYear = $year-1;
        $ppYear = $year-2;

        // == This part make the integration with WarnerMedia ALEPH base == //
        $queryAleph = "SELECT distinct sr.id as srID, sr.name as srName, a.id as agency, a.name as agencyName, c.id as client, c.name as clientName from wbd al 
                   left join agency a on a.ID = al.agency_id 
                   left join client c on c.ID = al.client_id 
                   left join sales_rep sr on sr.ID = al.current_sales_rep_id  
                   left join agency_group ag on ag.ID = a.agency_group_id 
                   where ag.ID = $agencyGroupId
                   and (sr.id in ($salesRep))
                   and al.`year` in ($year,$pYear,$ppYear)
                   order by c.name asc";
        //echo"<pre>$queryAleph</pre>";
        $resultAleph = $con->query($queryAleph);
        $from = array('srID' , 'srName','agency', 'agencyName', 'client', 'clientName');
        $valueAleph = $sql->fetch($resultAleph, $from, $from);
    
        // == This variable return a matrix with Sales Rep Name and ID, Agency Name and ID and Client name and ID == //
        $value = $valueAleph;

        return $value;
    }

    public function getClientByYear(String $agencyGroupId, string $salesRep, Object $con, Object $sql){
        $base = new base();   
        
        $year = (int)date("Y");
        $pYear = $year-1;
        $ppYear = $year-2;


        // == This part make the integration with WarnerMedia ALEPH base == //
        $queryAleph = "SELECT distinct  a.id as agency, a.name as agencyName, c.id as client, c.name as clientName from wbd al 
                   left join agency a on a.ID = al.agency_id 
                   left join client c on c.ID = al.client_id 
                   left join sales_rep sr on sr.ID = al.current_sales_rep_id  
                   left join agency_group ag on ag.ID = a.agency_group_id 
                   where ag.ID = $agencyGroupId
                   and (sr.id in ($salesRep))
                   and al.`year` in ($year,$pYear,$ppYear)
                   order by c.name asc";
        //echo"<pre>$queryAleph</pre>";
        $resultAleph = $con->query($queryAleph);
        $from = array('agency', 'agencyName', 'client', 'clientName');
        $valueAleph = $sql->fetch($resultAleph, $from, $from);
    
        // == This variable return a matrix with Sales Rep Name and ID, Agency Name and ID and Client name and ID == //
        $value = $valueAleph;

        return $value;
    }

    // == This function get values for every client in the matrix generated by getSalesRepByAgencyGroup function == // 
    public function getValueForBvByYear(String $salesRep=NULL, String $agency, String $client, int $year, String $valueType, Object $con, Object $sql, String $currency){
         // == ALEPH integration == //
        $pRate = new pRate();

        if($currency == '1'){
            $pRateWM = 1; // Temporary value for WM pRate, will need change after 2023
        }else {
            if ($year <= 2022 ) {
                $pRateWM = 4.99;
            }else{
                $pRateWM = $pRate->getPRateByRegionAndYear($con, array('1'), array($year));
            }
        }

        $valueWbd = $valueType."_value";
        $queryALEPH = "SELECT SUM($valueWbd) from wbd
                 where agency_id = $agency
                 AND client_id = $client
                 AND year = $year";
        //var_dump($queryALEPH);
        $resultALEPH = $con->query($queryALEPH);
        $from = "SUM($valueWbd)";
        $valuePivot = $sql->fetchSUM($resultALEPH, $from);
        $valueALEPH = $valuePivot[$from] / $pRateWM;

         $value = $valueALEPH;
         return $value;
     }

     public function getPrevision(String $salesRep, String $clientID, String $agencyID, String $currency,String $previsionType,Object $con, Object $sql, int $year){
       $pRate = new pRate();
        if($currency == '1'){
            $pRateWM = 1; // Temporary value for WM pRate, will need change after 2023
        }else {
            if ($year <= 2022 ) {
                $pRateWM = 4.99;
            }else{
                $pRateWM = $pRate->getPRateByRegionAndYear($con, array('1'), array($year));
            }
        }

        switch ($previsionType){
            case 'wbd':
                $previsionQuery = "SELECT forecast_revenue AS forecast, currency_id AS currency from bv_forecast
                                   WHERE (sales_rep_id IN ($salesRep))
                                   AND client_id = $clientID
                                   AND agency_id = $agencyID";
                $from = array('forecast', 'currency');
                break;
            case 'spt':
                $previsionQuery = "SELECT forecast_spt_revenue AS forecast, currency_id AS currency, value from bv_forecast
                                   WHERE (sales_rep_id IN ($salesRep))
                                   AND client_id = $clientID
                                   AND agency_id = $agencyID";
                $from = array('forecast', 'currency');
                break;
            case 'status':
                $previsionQuery = "SELECT status from bv_forecast
                                   WHERE (sales_rep_id IN ($salesRep))
                                   AND client_id = $clientID
                                   AND agency_id = $agencyID";
                $from = array('status');
                break;
        }

        $previsionResult = $con->query($previsionQuery);
        $previsionValue = $sql->fetch($previsionResult, $from, $from);

        if ($previsionType == 'wbd' || $previsionType == 'spt'){
            if ($currency != $previsionValue[0]['currency']){
                $return =  $previsionValue[0]['forecast'] / $pRateWM;
            } else {
                $return =  $previsionValue[0]['forecast'];
            }
        }else{
            $return = $previsionValue[0]['status'];
        }

        //var_dump($return);
        return $return;
     }
 
    // == This function generate the matrix used in front-end == //
    public function tableBV(String $agencyGroupId, int $year, Object $con, String $valueType, String $salesRep, String $currency){
        $sql = new sql();
        $pRate = new pRate();
        $year = (int)date("Y");
        $pYear = $year-1;
        $ppYear = $year-2;

        $bvTable = array();
        $includeClient = $this->getSalesRepByClient($agencyGroupId, $salesRep,$con, $sql);
        $repInfo = $this->getSalesRepByAgencyGroup($agencyGroupId, $salesRep, $year, $con, $sql);
        
        if ($includeClient == null) {
            $result = $repInfo;
        }else{
            $result = array_merge($repInfo,$includeClient);
            $result = array_values($result);
            
        }

        //var_dump($result);
        /* == Generate arrays for fill the matrix, 
        the matrix structure is:
        [Sales Rep Name, Agency Name, Client Name, Antepenultimate Year Value, Penultimate Year Value, Actual Year Value, Actual Year Prevision, (Actual Year Value + Actual Year Prevision) and Variation] == */
       for ($i = 0; $i < sizeof($result); $i++){

            $pPreviousValue = $this->getValueForBvByYear($result[$i]['srID'], $result[$i]['agency'], $result[$i]['client'], $ppYear, $valueType, $con, $sql,$currency);
            $previousValue = $this->getValueForBvByYear($result[$i]['srID'], $result[$i]['agency'], $result[$i]['client'], $pYear, $valueType, $con, $sql,$currency);
            $actualValue = $this->getValueForBvByYear($result[$i]['srID'], $result[$i]['agency'], $result[$i]['client'], $year, $valueType, $con, $sql,$currency);
            $prevValue = $this->getPrevision($salesRep, $result[$i]['client'], $result[$i]['agency'], $currency, 'wbd', $con, $sql,$year);
            $sptPrev = $this->getPrevision($salesRep, $result[$i]['client'], $result[$i]['agency'],$currency, 'spt', $con, $sql,$year);
            $statusString = $this->getPrevision($salesRep, $result[$i]['client'], $result[$i]['agency'],$currency, 'status', $con, $sql,$year);

            // == Percentage and division by 0 check, if values are big than 0 == //
            if ($actualValue > 0 && $previousValue > 0){
                $variation = number_format((($actualValue + $prevValue) / $previousValue) * 100);
            } else {
                $variation = 0;
            }

            // == Pivot Array used for fullfill the matrix, using the structure above == //
            $pivotArray = array('client' => $result[$i]['clientName'],'agency' => $result[$i]['agencyName'], $ppYear => $pPreviousValue, $pYear => $previousValue, $year => $actualValue, "prev" => $prevValue, "prevActualSum" => $actualValue + $prevValue, "sptPrev" => $sptPrev, "variation" => $variation, "status" => $statusString, "clientId" => $result[$i]['client'], "agencyId" => $result[$i]['agency']);
            
            //var_dump($pivotArray);
            array_push($bvTable, $pivotArray);

        };    
       
        
        //var_dump($bvTable);
        return $bvTable;
    }

    public function tableResume(String $agencyGroupId, int $year, Object $con, String $valueType, String $salesRep, String $currency){
        $sql = new sql();
        $pRate = new pRate();
        $year = (int)date("Y");
        $pYear = $year-1;
        $ppYear = $year-2;

        $bvTable = array();
        $includeClient = $this->getSalesRepByClientResume($agencyGroupId, $salesRep,$con, $sql);
        $repInfo = $this->getClientByYear($agencyGroupId, $salesRep, $con, $sql);
        
        if ($includeClient == null) {
            $result = $repInfo;
        }else{
            $result = array_merge($repInfo,$includeClient);
            $result = array_values($result);
            
        }

        //var_dump($result);
        /* == Generate arrays for fill the matrix, 
        the matrix structure is:
        [Sales Rep Name, Agency Name, Client Name, Antepenultimate Year Value, Penultimate Year Value, Actual Year Value, Actual Year Prevision, (Actual Year Value + Actual Year Prevision) and Variation] == */
       for ($i = 0; $i < sizeof($result); $i++){

            $pPreviousValue = $this->getValueForBvByYear($salesRep, $result[$i]['agency'], $result[$i]['client'], $ppYear, $valueType, $con, $sql,$currency);
            $previousValue = $this->getValueForBvByYear($salesRep, $result[$i]['agency'], $result[$i]['client'], $pYear, $valueType, $con, $sql,$currency);
            $actualValue = $this->getValueForBvByYear($salesRep, $result[$i]['agency'], $result[$i]['client'], $year, $valueType, $con, $sql,$currency);
            $prevValue = $this->getPrevision($salesRep, $result[$i]['client'], $result[$i]['agency'], $currency, 'wbd', $con, $sql,$year);
            $sptPrev = $this->getPrevision($salesRep, $result[$i]['client'], $result[$i]['agency'],$currency, 'spt', $con, $sql,$year);
            $statusString = $this->getPrevision($salesRep, $result[$i]['client'], $result[$i]['agency'],$currency, 'status', $con, $sql,$year);

            // == Percentage and division by 0 check, if values are big than 0 == //
            if ($actualValue > 0 && $previousValue > 0){
                $variation = number_format((($actualValue + $prevValue) / $previousValue) * 100);
            } else {
                $variation = 0;
            }

            // == Pivot Array used for fullfill the matrix, using the structure above == //
            $pivotArray = array('client' => $result[$i]['clientName'],'agency' => $result[$i]['agencyName'], $ppYear => $pPreviousValue, $pYear => $previousValue, $year => $actualValue, "prev" => $prevValue, "prevActualSum" => $actualValue + $prevValue, "sptPrev" => $sptPrev, "variation" => $variation, "status" => $statusString, "clientId" => $result[$i]['client'], "agencyId" => $result[$i]['agency']);
            
            //var_dump($pivotArray);
            array_push($bvTable, $pivotArray);

        };    
       
        
        //var_dump($bvTable);
        return $bvTable;
    }


    // == Generate total value based on result of tableBV function == //
    public function getBVTotal(array $bvTable, int $year){
        $ppYear = (String) $year - 2;
        $pYear = (String) $year - 1 ;

        $totalPpYear = 0;
        $totalPYear = 0;
        $totalCYear = 0;
        $totalPrev = 0;
        $totalSPTPrev = 0;

        for ($i = 0; $i < sizeof($bvTable); $i++){
            $totalPpYear += $bvTable[$i][$ppYear];
            $totalPYear += $bvTable[$i][$pYear];
            $totalCYear += $bvTable[$i][$year];
            $totalPrev += $bvTable[$i]['prev'];
            $totalSPTPrev += $bvTable[$i]['sptPrev'];
        }

        if ($totalCYear > 0  && $totalPYear > 0 ){
            $totalVariation = number_format((($totalCYear + $totalPrev) / $totalPYear) * 100);
        } else {
            $totalVariation = 0;
        }

        $totalPrevActualSum = $totalCYear + $totalPrev;

        $pivotArray = array($ppYear => $totalPpYear, $pYear => $totalPYear, $year => $totalCYear, "prev" => $totalPrev, "prevActualSum" => $totalPrevActualSum, "sptPrev" => $totalSPTPrev, "variation" => $totalVariation);

        return $pivotArray;
    }

    // == This function are called by Save button in front-end and verify if the registers are already created in database, if already exist it will make a update, if not, will create a new registry == //
    public function verifyUpdateAndSaveBV(int $salesRep, int $clientID, int $agencyID, int $agencyGroupId, int $currency, String $value, $forecast, $forecastSPT, $status, Object $con, Object $sql){
        $updateTime = date("Y-m-d");

        $selectQuery = "SELECT agency_id AS agency, client_id AS client
                        FROM bv_forecast
                        WHERE sales_rep_id = $salesRep
                        AND client_id = $clientID
                        AND agency_id = $agencyID
                        AND agency_group_id = $agencyGroupId
                        AND currency_id = $currency
                        AND value = '$value'";
        $from = array('agency', 'client');
        $selectResultQuery = $con->query($selectQuery);
        $resultSelect = $sql->fetch($selectResultQuery, $from, $from);

        if ($resultSelect != false){
            $updateQuery = "UPDATE bv_forecast 
                        SET forecast_revenue = $forecast,
                        forecast_spt_revenue = $forecastSPT,
                        updated_date = '$updateTime',
                        status = '$status'
                        WHERE sales_rep_id = $salesRep
                        AND client_id = $clientID
                        AND agency_id = $agencyID
                        AND agency_group_id = $agencyGroupId
                        AND currency_id = $currency
                        AND value = '$value'";

            $resultQuery = $con->query($updateQuery);
        }else{
            $insertQuery = "INSERT INTO  bv_forecast
                        SET updated_date = '$updateTime',
                        sales_rep_id = $salesRep,
                        client_id = $clientID,
                        agency_id = $agencyID,
                        agency_group_id = $agencyGroupId,
                        currency_id = $currency,
                        value = '$value',
                        forecast_revenue = $forecast,
                        forecast_spt_revenue = $forecastSPT,
                        status = '$status'";
            $resultInsertQuery = $con->query($insertQuery);
            //var_dump($insertQuery);
        }

    }

    //this information get the last date and person who made the forecast in view
    public function getRepAndDateOfPrev(String $salesRep, int $agencyGroupId, Object $con){
        $sql = new sql();
        
        $select = "SELECT distinct sales_rep.name as salesRep, updated_date as updateDate
                    FROM bv_forecast
                    LEFT JOIN sales_rep ON bv_forecast.sales_rep_id = sales_rep.ID
                    WHERE (sales_rep_id IN ($salesRep))
                    AND agency_group_id = $agencyGroupId
                ";
        
        $from = array('salesRep', 'updateDate'); 
        $selectQuery = $con->query($select);
        $resultSelect = $sql->fetch($selectQuery, $from, $from);

        if ($resultSelect != false) {
           $updateDate = $resultSelect;
        }else{
            $updateDate[0] = array('salesRep' => '-', 'updateDate' => '-');
        }

        return $updateDate;
    }

    //this function get all clients of database corresponding the years selected to make a option on the front-end
    public function listOFClients(Object $con, int $year){
        $sql = new sql();
        $year = (int)date("Y");
        $pYear = $year-1;
        $ppYear = $year-2;

        $select = "SELECT DISTINCT c.ID AS id ,c.name as client, a.ID as aID, a.name as agency
                    FROM wbd w
                    left join client c on c.ID = w.client_id
                    left join agency a on a.ID = w.agency_id
                    WHERE c.client_group_id = 1 
                    and w.year in ($year,$pYear,$ppYear)
                    ORDER BY c.name ASC";
        //var_dump($select);
        $from = array('id','client','aID','agency');
        $selectQuery = $con->query($select);
        $client = $sql->fetch($selectQuery, $from, $from);
        $client = $client;
        return $client;
    }

    public function newClientInclusion(Object $con, String $agencyGroup, String $salesRep, String $client,String $agency){
        $updateTime = date("Y-m-d");

        $insertQuery = "INSERT INTO  bv_new_clients
                        SET created_date = '$updateTime',
                        sales_rep_id = $salesRep,
                        client_id = $client,
                        agency_id = $agency,
                        agency_group_id = $agencyGroup
                        ";
        //var_dump($insertQuery);
        $resultInsertQuery = $con->query($insertQuery);
    }

    public function getSalesRepByClient(String $agencyGroupId, string $salesRep, Object $con, Object $sql){
        
        $year = (int)date("Y");
        $pYear = $year-1;
        $ppYear = $year-2;

         $selectClient = "SELECT distinct  c.id as id, a.id as agency 
                            from bv_new_clients b
                            left join sales_rep sr on sr.ID = b.sales_rep_id 
                            left join client c on c.ID = b.client_id 
                            left join agency_group ag on ag.ID = b.agency_group_id
                            left join agency a on a.ID = b.agency_id
                            where ag.ID = $agencyGroupId
                            and (sr.ID IN ($salesRep))";
                        //var_dump($selectClient);
            $resultClient = $con->query($selectClient);
            $from = array('id','agency');
            $client = $sql->fetch($resultClient, $from, $from);
            //var_dump($client);

            if ($client != null) {
                for ($c=0; $c < sizeof($client); $c++) {
                    $tmp1[] = $client[$c]['id']; 
                    $tmp2[] = $client[$c]['agency']; 
                    
                    $queryClient[$c] = "SELECT distinct sr.id as srID, sr.name as srName, a.id as agency, a.name as agencyName, c.id as client, c.name as clientName from  wbd cm 
                           left join agency a on a.ID = cm.agency_id 
                           left join client c on c.ID = cm.client_id 
                           left join sales_rep sr on sr.ID = cm.current_sales_rep_id  
                           left join agency_group ag on ag.ID = a.agency_group_id 
                           where c.id in ($tmp1[$c])
                           and a.id in ($tmp2[$c])
                           and cm.`year` in ($year,$pYear,$ppYear)
                           order by c.name asc";
                    //echo "<pre>$queryClient[$c]</pre>";
                    $result[$c] = $con->query($queryClient[$c]);
                    $from = array('srID' , 'srName','agency', 'agencyName', 'client', 'clientName');
                    $tmp[] = $sql->fetch($result[$c], $from, $from);
                }

                for ($x=0; $x <sizeof($tmp) ; $x++) { 
                   if ($tmp != false) {
                        $valueClient[] = $tmp[$x][0];
                    }else{
                        $valueClient = "";
                    }
                } 
                
                return $valueClient;
            }else{
                $valueClient = "";

                return $valueClient;
            }
            //var_dump($valueClient);
    }
    // in the resume view we don't bring the info by sales rep, that's the why we have tht function
    public function getSalesRepByClientResume(String $agencyGroupId, string $salesRep, Object $con, Object $sql){
        
        $year = (int)date("Y");
        $pYear = $year-1;
        $ppYear = $year-2;

         $selectClient = "SELECT distinct  c.id as id, a.id as agency 
                            from bv_new_clients b
                            left join sales_rep sr on sr.ID = b.sales_rep_id 
                            left join client c on c.ID = b.client_id 
                            left join agency_group ag on ag.ID = b.agency_group_id
                            left join agency a on a.ID = b.agency_id
                            where ag.ID = $agencyGroupId
                            and (sr.ID IN ($salesRep))";
                        //var_dump($selectClient);
            $resultClient = $con->query($selectClient);
            $from = array('id','agency');
            $client = $sql->fetch($resultClient, $from, $from);
            //var_dump($client);

            if ($client != null) {
                for ($c=0; $c < sizeof($client); $c++) {
                    $tmp1[] = $client[$c]['id']; 
                    $tmp2[] = $client[$c]['agency']; 
                    
                    $queryClient[$c] = "SELECT distinct  a.id as agency, a.name as agencyName, c.id as client, c.name as clientName from  wbd cm 
                           left join agency a on a.ID = cm.agency_id 
                           left join client c on c.ID = cm.client_id 
                           left join sales_rep sr on sr.ID = cm.current_sales_rep_id  
                           left join agency_group ag on ag.ID = a.agency_group_id 
                           where c.id in ($tmp1[$c])
                           and a.id in ($tmp2[$c])
                           and cm.`year` in ($year,$pYear,$ppYear)
                           order by c.name asc";
                    //echo "<pre>$queryClient[$c]</pre>";
                    $result[$c] = $con->query($queryClient[$c]);
                    $from = array('agency', 'agencyName', 'client', 'clientName');
                    $tmp[] = $sql->fetch($result[$c], $from, $from);
                }

                for ($x=0; $x <sizeof($tmp) ; $x++) { 
                   if ($tmp != false) {
                        $valueClient[] = $tmp[$x][0];
                    }else{
                        $valueClient = "";
                    }
                } 
                
                return $valueClient;
            }else{
                $valueClient = "";

                return $valueClient;
            }
            //var_dump($valueClient);
    }

    public function getClientByAgencyGroup(String $agencyGroupId, string $salesRep, Object $con, Object $sql){
        $base = new base();   
        $year = (int)date("Y");
        $pYear = $year-1;
        $ppYear = $year-2;
        $pppYear = $year-3;

        // == This part make the integration with WarnerMedia ALEPH base == //
        $queryAleph = "SELECT distinct a.id as agency, a.name as agencyName, c.id as client, c.name as clientName from wbd w 
                   left join agency a on a.ID = w.agency_id 
                   left join client c on c.ID = w.client_id 
                   left join brand b on b.ID = w.brand_id  
                   left join agency_group ag on ag.ID = a.agency_group_id 
                   where ag.ID = $agencyGroupId
                   and w.`year` in ($pYear,$ppYear,$pppYear)
                   order by c.name asc";
        //var_dump($queryAleph);
        $resultAleph = $con->query($queryAleph);
        $from = array('agency', 'agencyName', 'client', 'clientName');
        $valueAleph = $sql->fetch($resultAleph, $from, $from);
    
        
        // == This variable return a matrix with Sales Rep Name and ID, Agency Name and ID and Client name and ID == //
        $value = $valueAleph;

        return $value;
    }

    //this function make de matrix of AVB table
    public function bvTable(int $year, int $agencyGroupId, Object $con, String $platform,int $company){

        $fromValue1 = $this->getBV($year,$agencyGroupId,$con,'from_value', $platform, $company);
        $toValue1 = $this->getBV($year, $agencyGroupId,$con,'to_value', $platform, $company);
        //var_dump($toValue1);
        $percentage1 = $this->getBV($year, $agencyGroupId,$con,'percentage', $platform, $company);


        $tmp = array('fromValue' => $fromValue1, 'toValue' => $toValue1, 'percentage' => $percentage1);

        return $tmp;
    }

    //this functions get the AVB information
    public function getBv(int $year, int $agencyGroupId, Object $con,String $type, String $platform, int $company){
        $sql = new sql();

        $select = "SELECT DISTINCT $type
                    FROM bv_band
                    WHERE agency_group_id = $agencyGroupId
                    AND (year in ($year))
                    and platform = '$platform'
                    and company = $company
                    ";
        //var_dump($select);
         $result = $con->query($select);
         $from = array($type);
         $value = $sql->fetch($result, $from,$from);
         //var_dump($value);
         return $value;
   }

   //this function get the info of pay tv percentage
   public function getPayTv(Object $con){
    $sql = new sql();

    $year = date("Y")-1;

    $select = "SELECT station,percentage
                from paytv
                where year = $year";

    $result = $con->query($select);
    $from = array('station','percentage');
    $value = $sql->fetch($result, $from,$from);
    
    return $value;
   
   }
   //this function get a target of corresponds of jan and feb of wich year
   public function getMonthTarget(Object $con, int $agencyGroupId, int $year, String $company){
    $sql = new sql();

    $select = "SELECT distinct dsc_target, spt_target
                FROM bv_month_target
                where agency_group_id = $agencyGroupId
                and year = $year
                and company = '$company'
                ";
    //var_dump($select);
    $result = $con->query($select);
    $from = array('dsc_target','spt_target');
    $value = $sql->fetch($result, $from,$from);

    return $value;
   
   }
   //This function get the target of AVB
   public function getBvTarget(Object $con, int $agencyGroupId, int $year, String $company){
    $sql = new sql();

    $select = "SELECT distinct dsc_target, spt_target
                FROM bv_target
                where agency_group_id = $agencyGroupId
                and year = $year
                and company = '$company'
                ";
    //var_dump($select);
    $result = $con->query($select);
    $from = array('dsc_target','spt_target');
    $value = $sql->fetch($result, $from,$from);

    return $value;
  
   }
    //this function get the BKGS to make the coparison to the target
   public function getReal(Object $con, int $agencyGroupId, int $year, String $company){
    $sql = new sql();

    $select = "SELECT sum(w.net_value) as netRevenue
                FROM wbd w
                left join agency a on a.ID = w.agency_id
                left join agency_group ag on ag.ID = a.agency_group_id
                left join brand b on b.ID = w.brand_id
                where ag.ID = $agencyGroupId
                and w.year = $year
                and b.brand_group_id = $company
                
                ";
    //var_dump($select);
    $result = $con->query($select);
    $from = array('netRevenue');
    $value = $sql->fetch($result, $from,$from);

    return $value;
   }

    public function historyTable(Object $con, int $agencyGroupId, int $year){

        $historyTable = array();

        $geBrands = "1,2,3,4,5,6,7,8,11,12,18,19,20,24,28,30,31,32,33,35,36,37,41,42,43,46,47,51,53,54";

        $sportsBrands = "44,45,52";

        $newsBrands = "38,39,40,64,65,66";

        $digitalBrands = "9,10,13,14,15,16,34,48,49,50,55,58,62,67,68,69";

        $sptBrands = "22,23,25,26,60";

        $client = $this->clientByYear($con,$agencyGroupId,$year);

        for ($c=0; $c <sizeof($client); $c++) { 
            
            $geCluster[$c] = $this->valueByCluster($client[$c]['clientID'],$con,$year,$geBrands);

            $sportsCluster[$c] = $this->valueByCluster($client[$c]['clientID'],$con,$year,$sportsBrands);

            $newsCluster[$c] = $this->valueByCluster($client[$c]['clientID'],$con,$year,$newsBrands);

            $digitalCluster[$c] = $this->valueByCluster($client[$c]['clientID'],$con,$year,$digitalBrands);

            $sptCluster[$c] = $this->valueByCluster($client[$c]['clientID'],$con,$year,$sptBrands);

            $pivotArray = array('client' => $client[$c]['clientID'], 'clientName' => $client[$c]['clientName'], 'agencyName' => $client[$c]['agencyName'],'geCluster' => $geCluster[$c],'sportsCluster' => $sportsCluster[$c],'newsCluster' => $newsCluster[$c],'digitalCluster' => $digitalCluster[$c],'sptCluster' => $sptCluster[$c]);

            array_push($historyTable,$pivotArray);
        };

        return $historyTable;
    }

    public function totalByCluster($historyTable){

        $total['geCluster'] = 0;
        $total['sportsCluster'] = 0;
        $total['newsCluster'] = 0;
        $total['digitalCluster'] = 0;
        $total['sptCluster'] = 0;
        $total['totalCluster'] = 0;

        for ($i=0; $i <sizeof($historyTable) ; $i++) { 
            $total['geCluster'] += $historyTable[$i]['geCluster'][0]['netRevenue'];
            $total['sportsCluster'] += $historyTable[$i]['sportsCluster'][0]['netRevenue'];
            $total['newsCluster'] += $historyTable[$i]['newsCluster'][0]['netRevenue'];
            $total['digitalCluster'] += $historyTable[$i]['digitalCluster'][0]['netRevenue'];
            $total['sptCluster'] += $historyTable[$i]['sptCluster'][0]['netRevenue'];
            $total['totalCluster'] = $total['geCluster'] + $total['sportsCluster'] + $total['newsCluster'] /*+ $total['digitalCluster']*/;
        }
        
        return $total;
    }

    public function totalByClientHistory($historyTable){


        for ($i=0; $i <sizeof($historyTable) ; $i++) { 
            $total[$i] = $historyTable[$i]['geCluster'][0]['netRevenue'] + $historyTable[$i]['sportsCluster'][0]['netRevenue'] + $historyTable[$i]['newsCluster'][0]['netRevenue'] /*+ $historyTable[$i]['digitalCluster'][0]['netRevenue']*/;
        }
        //var_dump($total);
        return $total;
    }

   public function clientByYear(Object $con, int $agencyGroupId, int $year){
    $sql = new sql();

    $select = "SELECT DISTINCT c.ID as clientID, c.name as clientName, a.ID as agencyID, a.name as agencyName
                FROM wbd w
                LEFT JOIN client c on c.ID = w.client_id
                LEFT JOIN agency a ON a.ID = w.agency_id
                LEFT JOIN agency_group ag ON ag.ID = a.agency_group_id
                WHERE w.year = $year
                AND ag.ID = $agencyGroupId";

    $result = $con->query($select);
    $from = array('clientID','clientName','agencyID','agencyName');
    $value = $sql->fetch($result, $from,$from);

    return $value;

   }

   public function valueByCluster(Int $client, Object $con, Int $year, String $brands){
    $sql = new sql();

    $select = "SELECT SUM(net_value) as netRevenue
                FROM wbd
                WHERE client_id = $client
                and year = $year
                and (brand_id IN ($brands))";
    
    $result = $con->query($select);
    $from = array('netRevenue');
    $tmp = $sql->fetch($result, $from,$from);
    
     if ($tmp[0]['netRevenue'] != null) {
       $value = $tmp;
    }else{
        $value[0] = array('netRevenue' => '0');
    }
    
    return $value;

   }
}
